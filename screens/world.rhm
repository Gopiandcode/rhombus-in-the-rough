#lang rhombus

import:
  lib("raylib/2d/unsafe.rkt") as raylib

  "../lib/lang.rhm" open

  "../game/raylib_lang.rhm" open
  "../lib/ordered_drawing.rhm"

  "../game/view.rhm" open
  "../game/game_map.rhm"
  "../game/game_state.rhm"
  "../game/inventory.rhm"

  "../systems/movement.rhm" open
  "../systems/user_control.rhm" open
  "../systems/animation.rhm" open
  "../systems/drawing.rhm" open
  "../systems/collision.rhm" open
  "../systems/interaction.rhm" open
  "../systems/dialog.rhm" open
  "../systems/hud.rhm" open
  "../systems/attack.rhm" open
  "../systems/damage.rhm" open
  "../systems/physical_damage.rhm" open
  "../systems/death.rhm" open
  "../systems/inventory.rhm" open
  "../systems/drop.rhm" open
  "../systems/camera.rhm" open
  "../systems/behaviour.rhm" open
  "../systems/direction.rhm" open
  "../systems/aggro.rhm" open

  "../game/map_manager.rhm"

  "inventory.rhm" open

export:
  WorldScreen

use_static


class WorldScreen(
    view :: View,
    map_manager :: map_manager.MapManager,
    player_inventory :: inventory.Inventory,
    mutable omap :: maybe(game_map.GameMap)
  ):
 implements game_state.Screen

 constructor(view, map_manager :: map_manager.MapManager):
   super(view, map_manager, inventory.Inventory(), #false)

 // method set_map(new_map :: game_map.GameMap):
 //   when omap:
 //     def map :~ game_map.GameMap = omap
 //     map.destroy()
 //   omap := new_map
 //   def map :~ game_map.GameMap = omap
 //   map.init()

 override method draw():
    def map :~ game_map.GameMap = omap
    draw_2d view:
      map_manager.draw(view)
      // CollisionSystem.draw()
      // DamageAreaSystem.draw()
      // HurtSystem.draw()
      CharacterDrawingSystem.draw()
      WeaponAnimationSystem.draw()
      ItemDrawingSystem.draw()

      ordered_drawing.draw()

      InteractionSystem.draw()
    HUDDrawingSystem.draw()



 override method update():
   map_manager.update()
 
   view.update()
   CameraSystem.update(view,map_manager.current_map)
   DeAggroSystem.update()
   AggroSystem.update()
   BehaviourSystem.update()
   UserControlSystem.update()
   DamageAreaSystem.update()
   DamageReceivingSystem.update()
   DamageApplicationSystem.update()
   PhysicalDamageApplicationSystem.update()
   DeathSystem.update()
   MonsterAttackSystem.update()
   WeaponAttackSystem.update()
   ItemAnimationSystem.update()
   AnimationSystem.update()
   MovementSystem.update()
   FrictionSystem.update()
   ItemDropSystem.update()
   PickupItemSystem.update()
   DirectionSystem.update()
   CollisionSystem.update(map_manager.current_map.get_map())
   MapClampSystem.update(map_manager.current_map)
   InteractionSystem.update()
   DialogSystem.update()

   handle_inputs (raylib.IsKeyPressed)
   | raylib.KEY_I
     game_state.push(InventoryScreen(player_inventory))

