#lang rhombus

import:
  lib("raylib/2d/unsafe.rkt") as raylib

  "../lib/datatypes.rhm" open
  "../lib/adt.rhm"

  "../game/raylib_lang.rhm" open
  "../game/game_state.rhm"
  "../game/dialog_box.rhm"
  "../game/dialog.rhm"

export:
  DialogScreen

def sprite_rect: Rectangle(0.,0.,2048.,2048.)
def dest_rect: Rectangle(0.,0.,320.,320.)
def origin: Vector2(0.,0.)

adt.datatype State
| FadeIn(ratio :: Real, color :: Color)
| RenderingText(offset :: Integral, faster :: Boolean)
| RenderingCompleted()
| Completed()

def character_color : Color(255,255,255,0)
def dialog_color : Color(255,255,255,0)

class DialogScreen(
     dialog_item :: dialog.Dialog,
     dialog_box :: dialog_box.DialogBox,
     mutable state :: State
   ):
  implements game_state.Screen

  constructor (dialog_item): super(dialog_item, dialog_box.DialogBox(), RenderingCompleted())

  override method draw():
    adt.ematch state
    | FadeIn(ratio, color):
        #void
    | RenderingText(offset, faster):
        #void
    | RenderingCompleted():
        dialog_box.draw_character_left(dialog_item.character_sprite)
        dialog_box.draw()
        dialog_box.draw_text(dialog_item.text)
    | Completed():
        #void

  override method update():
    handle_inputs (raylib.IsKeyReleased)
    | raylib.KEY_Q
      state := Completed()


  override method should_pop():
    adt.ematch state
    | FadeIn(_, _): #false
    | RenderingText(_, _): #false
    | RenderingCompleted(): #false
    | Completed(): #true
