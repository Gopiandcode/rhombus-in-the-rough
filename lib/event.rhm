#lang rhombus

import:
  rhombus/meta open
  "message.rhm"
  "gvector.rhm"

export:
  send
  handle

use_static

def mutable message_queue :: gvector.GVector: gvector.GVector.make()

fun send(m :: message.Message):
  gvector.GVector.add(message_queue, m)

fun retrieve() :: Array.of(message.Message):
  def result :: Array.of(message.Message) : gvector.GVector.to_vector(message_queue)
  message_queue := if result.length() > 0 | gvector.GVector.make(result.length()) | gvector.GVector.make()
  result

expr.macro
| 'handle
   | $case ...: $body ...
   | ...':

    'block:
      def messages: retrieve()
      for:
        each msg: messages
        match msg
        | $case ...: $body ...
        | ...'
