#lang rhombus

import:
   rhombus/meta open
   lib("racket/main.rkt") as racket
   lib("raylib/2d/unsafe.rkt") as raylib
   lib("raylib/raymath/unsafe.rkt") as raymath

export:
  Vector2
  Vector3
  Vector4
  Color
  Rectangle
  Camera2D

meta:
  fun handle_update_vector(left,ty,get,set,tail):
    match tail
    | ':= $rhs':
        values('block:
                 def b :~ $ty = $left
                 $set(b.self, $rhs)',
               '')
    | '+= $rhs':
        values('block:
                 def b :~ $ty = $left
                 $set(b.self, $get(b.self) + $rhs)',
               '')
    | '-= $rhs':
        values('block:
                 def b :~ $ty = $left
                 $set(b.self, $get(b.self) - $rhs)',
               '')
    | ~else:
         'block:
            def b :~ $ty = $left
            $get(b.self)'

  fun handle_update_nested(left, ty, ty_inner, get, set, tail):
    match tail
    | ':= $vl':
        values(
          'block:
            def b :~ $ty = $left
            def vl :~ $ty_inner = $vl
            $set(b.self, vl.inner())',
          '')
    | ~else:
        values('(block:
                  def b :~ $ty = $left
                  ($ty_inner($get(b.self)) :~ $ty_inner) :~ $ty_inner)',
               tail)
    

class Vector2(self):
  opaque
  internal _Vector2
  
  constructor
  | (self): super(self)
  | (x,y): super(raylib.#{make-Vector2}(math.inexact(x),math.inexact(y)))

  method to_string():
    racket.format("#vec2<~a,~a>", raylib.#{Vector2-x}(self), raylib.#{Vector2-y}(self))

  method distance(): raymath.Vector2Length(self)

  method normalize() :: Vector2: Vector2(raymath.Vector2Normalize(self))

  method subtract(other :: Vector2) :: Vector2:
    Vector2(raymath.Vector2Subtract(self, other.self))

  method add(other :: Vector2) :: Vector2:
    Vector2(raymath.Vector2Add(self, other.self))

  method scale(by :: Real) :: Vector2:
    Vector2(raymath.Vector2Scale(self, math.inexact(by)))

  method inner(): self

  dot '$left . x' :
    ~tail : '$tail'
    handle_update_vector('$left', '_Vector2', 'raylib.#{Vector2-x}', 'raylib.#{set-Vector2-x!}', tail)

  dot '$left . y' :
    ~tail : '$tail'
    handle_update_vector('$left', '_Vector2', 'raylib.#{Vector2-y}', 'raylib.#{set-Vector2-y!}', tail)


class Vector3(self):
  opaque
  internal _Vector3
  

  constructor
  | (self): super(self)
  | (x,y,z):
      super(raylib.#{make-Vector3}(
         math.inexact(x),
         math.inexact(y),
         math.inexact(z)
      ))

  method to_string():
    racket.format("#vec3<~a,~a,~a>", raylib.#{Vector3-x}(self), raylib.#{Vector3-y}(self), raylib.#{Vector3-z}(self))

  method distance(): raymath.Vector3Length(self)

  method subtract(other :: Vector3):
    Vector3(raymath.Vector3Subtract(self, other.self))

  method add(other :: Vector3):
    Vector3(raymath.Vector3Add(self, other.self))

  method scale(by :: Real):
    Vector3(raymath.Vector3Scale(self, math.inexact(by)))

  method inner(): self

  dot '$left . x' :
    ~tail : '$tail'
    handle_update_vector('$left', '_Vector3', 'raylib.#{Vector3-x}', 'raylib.#{set-Vector3-x!}', tail)

  dot '$left . y' :
    ~tail : '$tail'
    handle_update_vector('$left', '_Vector3', 'raylib.#{Vector3-y}', 'raylib.#{set-Vector3-y!}', tail)

  dot '$left . z' :
    ~tail : '$tail'
    handle_update_vector('$left', '_Vector3', 'raylib.#{Vector3-z}', 'raylib.#{set-Vector3-z!}', tail)

class Vector4(self):
  opaque
  internal _Vector4
  
  constructor
  | (self): super(self)
  | (x,y,z,w):
      super(raylib.#{make-Vector4}(
        math.inexact(x),
        math.inexact(y),
        math.inexact(z),
        math.inexact(w)
      ))

  method to_string():
    racket.format("#vec4<~a,~a,~a,~a>", raylib.#{Vector4-x}(self), raylib.#{Vector4-y}(self), raylib.#{Vector4-z}(self), raylib.#{Vector4-w}(self))

  method inner(): self

  dot '$left . x' :
    ~tail : '$tail'
    handle_update_vector('$left', '_Vector4', 'raylib.#{Vector4-x}', 'raylib.#{set-Vector4-x!}', tail)

  dot '$left . y' :
    ~tail : '$tail'
    handle_update_vector('$left', '_Vector4', 'raylib.#{Vector4-y}', 'raylib.#{set-Vector4-y!}', tail)

  dot '$left . z' :
    ~tail : '$tail'
    handle_update_vector('$left', '_Vector4', 'raylib.#{Vector4-z}', 'raylib.#{set-Vector4-z!}', tail)

  dot '$left . w' :
    ~tail : '$tail'
    handle_update_vector('$left', '_Vector4', 'raylib.#{Vector4-w}', 'raylib.#{set-Vector4-w!}', tail)


class Color(self):
  opaque
  internal _Color
  
  constructor
  | (self): super(self)
  | (r,g,b,a):
      super(raylib.#{make-Color}(r,g,b,a))

  method to_string():
    racket.format("#color<~a,~a,~a,~a>", raylib.#{Color-r}(self), raylib.#{Color-g}(self), raylib.#{Color-b}(self), raylib.#{Color-a}(self))

  method inner(): self

  dot '$left . r' :
    ~tail : '$tail'
    handle_update_vector('$left', '_Color', 'raylib.#{Color-r}', 'raylib.#{set-Color-r!}', tail)

  dot '$left . g' :
    ~tail : '$tail'
    handle_update_vector('$left', '_Color', 'raylib.#{Color-g}', 'raylib.#{set-Color-g!}', tail)

  dot '$left . b' :
    ~tail : '$tail'
    handle_update_vector('$left', '_Color', 'raylib.#{Color-b}', 'raylib.#{set-Color-b!}', tail)

  dot '$left . a' :
    ~tail : '$tail'
    handle_update_vector('$left', '_Color', 'raylib.#{Color-a}', 'raylib.#{set-Color-a!}', tail)


class Rectangle(self):
  opaque
  internal _Rectangle

  constructor
  | (self): super(self)
  | (x,y,width,height):
      super(raylib.#{make-Rectangle}(
        math.inexact(x),
        math.inexact(y),
        math.inexact(width),
        math.inexact(height)
      ))

  method to_string():
    racket.format("#rect<~a,~a,~a,~a>", raylib.#{Rectangle-x}(self), raylib.#{Rectangle-y}(self), raylib.#{Rectangle-width}(self), raylib.#{Rectangle-height}(self))

  method inner(): self

  method intersects(other :: Rectangle):
    cond
    | other.x + other.width < this.x : #false
    | other.y + other.height < this.y : #false
    | this.x + this.width < other.x : #false
    | this.y + this.height < other.y : #false
    | ~else: #true


  dot '$left . x' :
    ~tail : '$tail'
    handle_update_vector('$left', '_Rectangle', 'raylib.#{Rectangle-x}', 'raylib.#{set-Rectangle-x!}', tail)

  dot '$left . y' :
    ~tail : '$tail'
    handle_update_vector('$left', '_Rectangle', 'raylib.#{Rectangle-y}', 'raylib.#{set-Rectangle-y!}', tail)

  dot '$left . width' :
    ~tail : '$tail'
    handle_update_vector('$left', '_Rectangle', 'raylib.#{Rectangle-width}', 'raylib.#{set-Rectangle-width!}', tail)

  dot '$left . height' :
    ~tail : '$tail'
    handle_update_vector('$left', '_Rectangle', 'raylib.#{Rectangle-height}', 'raylib.#{set-Rectangle-height!}', tail)

fun Rectangle.check_collision(left :: Rectangle, right :: Rectangle) :: Boolean :
  (raylib.CheckCollisionRecs(left.self, right.self))

fun Rectangle.get_collision_rect(left :: Rectangle, right :: Rectangle) :: Rectangle:
  Rectangle(raylib.GetCollisionRec(left.self, right.self))

class Camera2D(self):
  opaque
  internal _Camera2D
  
  constructor (offset :: Vector2 = Vector2(0.,0.), target :: Vector2  = Vector2(0.,0.), rotation=0., zoom=1.):
    super(raylib.#{make-Camera2D}(offset.inner(), target.inner(), rotation, zoom))

  method to_string():
    racket.format(
       "#rect<~a,~a,~a,~a>",
       Vector2(raylib.#{Camera2D-offset}(self)).to_string(),
       Vector2(raylib.#{Camera2D-target}(self)).to_string(),
       raylib.#{Camera2D-rotation}(self),
       raylib.#{Camera2D-zoom}(self))

  method inner(): self

  dot '$left . offset' :
    ~tail: '$tail'
    handle_update_nested('$left', '_Camera2D', 'Vector2', 'raylib.#{Camera2D-offset}', 'raylib.#{set-Camera2D-offset}', tail)

  dot '$left . target' :
    ~tail: '$tail'
    handle_update_nested('$left', '_Camera2D', 'Vector2', 'raylib.#{Camera2D-target}', 'raylib.#{set-Camera2D-target!}', tail)

  dot '$left . rotation' :
    ~tail : '$tail'
    handle_update_vector('$left', '_Camera2D', 'raylib.#{Camera2D-rotation}', 'raylib.#{set-Camera2D-rotation!}', tail)

  dot '$left . zoom' :
    ~tail : '$tail'
    handle_update_vector('$left', '_Camera2D', 'raylib.#{Camera2D-zoom}', 'raylib.#{set-Camera2D-zoom!}', tail)

