#lang rhombus
use_static

import:
   rhombus/meta open
   lib("racket/main.rkt") as racket

   meta:
     lib("racket/syntax.rkt") as syntax

   lib("raylib/2d/unsafe.rkt") as raylib
   lib("racket/flonum.rkt") as flonum
   lib("racket/unsafe/ops.rkt") as unsafe_ops

   "lang.rhm" open
   "float_struct.rhm" open
   "resources.rhm" expose: Texture def_texture
   "datatypes.rhm" open
   "gvector.rhm" open

export:
  queue_draw
  draw
 
def bounding_box :: Rectangle : Rectangle(0.,0.,0.,0.)
def sprite_box : Rectangle(0.,0.,0.,0.)
def origin : Vector2(0.,0.)
def_texture default_texture: "./resources/images/terrain.png"


float_struct DrawFloatData(
  draw_order,

  bounding_box_x,
  bounding_box_y,
  bounding_box_w,
  bounding_box_h,
  sprite_box_x,
  sprite_box_y,
  sprite_box_w,
  sprite_box_h,
  origin_x,
  origin_y,
  rotation
)

class DrawData(
   mutable texture :: Texture,
   float_data :: DrawFloatData,
   mutable color
 ):
  constructor():
    super(default_texture, DrawFloatData.create(), raylib.WHITE)
   
  method draw():
    bounding_box.x := DrawFloatData.bounding_box_x(this.float_data)
    bounding_box.y := DrawFloatData.bounding_box_y(this.float_data)
    bounding_box.width := DrawFloatData.bounding_box_w(this.float_data)
    bounding_box.height := DrawFloatData.bounding_box_h(this.float_data)

    sprite_box.x := DrawFloatData.sprite_box_x(this.float_data)
    sprite_box.y := DrawFloatData.sprite_box_y(this.float_data)
    sprite_box.width := DrawFloatData.sprite_box_w(this.float_data)
    sprite_box.height := DrawFloatData.sprite_box_h(this.float_data)

    origin.x := DrawFloatData.origin_x(this.float_data)
    origin.y := DrawFloatData.origin_y(this.float_data)

    raylib.DrawTexturePro(
       this.texture.inner(),
       sprite_box.inner(),
       bounding_box.inner(),
       origin.inner(),
       DrawFloatData.rotation(this.float_data),
       this.color
    )

fun draw_order_less_than(d1 :: DrawData, d2 :: DrawData):
  unsafe_ops.#{unsafe-fl<}(
    DrawFloatData.draw_order(d1.float_data),
    DrawFloatData.draw_order(d2.float_data)
  )
  
  
def f: DrawData()
def INIT_BUFFERED_DRAWS: 10_000
def mutable allocated_elements: INIT_BUFFERED_DRAWS
def mutable queued_draws: 0
def buffer :~ GVector = GVector.make(INIT_BUFFERED_DRAWS)

for:
  each i: 0 .. INIT_BUFFERED_DRAWS
  buffer.add(DrawData())

fun queue_draw(
   texture :: Texture,
   bounding_box_x :: Inexact,
   bounding_box_y :: Inexact,
   bounding_box_w :: Inexact,
   bounding_box_h :: Inexact,
   sprite_box_x :: Inexact,
   sprite_box_y :: Inexact,
   sprite_box_w :: Inexact,
   sprite_box_h :: Inexact,
   origin_x :: Inexact,
   origin_y :: Inexact,
   color = #false,
   draw_order = #false
  ):
    when (queued_draws >= allocated_elements):
      buffer.add(DrawData())
      allocated_elements := allocated_elements + 1
    def draw_data :: DrawData: buffer[queued_draws]
    def draw_float_data :: DrawFloatData: draw_data.float_data
    draw_data.texture := texture

    if draw_order
    | DrawFloatData.set_draw_order(draw_float_data, draw_order)
    | DrawFloatData.set_draw_order(draw_float_data, bounding_box_y)

    DrawFloatData.set_bounding_box_x(draw_float_data, bounding_box_x)
    DrawFloatData.set_bounding_box_y(draw_float_data, bounding_box_y)
    DrawFloatData.set_bounding_box_w(draw_float_data, bounding_box_w)
    DrawFloatData.set_bounding_box_h(draw_float_data, bounding_box_h)
    DrawFloatData.set_sprite_box_x(draw_float_data, sprite_box_x)
    DrawFloatData.set_sprite_box_y(draw_float_data, sprite_box_y)
    DrawFloatData.set_sprite_box_w(draw_float_data, sprite_box_w)
    DrawFloatData.set_sprite_box_h(draw_float_data, sprite_box_h)
    DrawFloatData.set_origin_x(draw_float_data, origin_x)
    DrawFloatData.set_origin_y(draw_float_data, origin_y)

    if color
    | draw_data.color := color
    | draw_data.color := raylib.WHITE

    queued_draws := queued_draws + 1

fun draw():
  when (queued_draws > 0):
    buffer.sort(0, queued_draws, draw_order_less_than)
    for:
      each:
        i: 0 .. queued_draws
        elt:: DrawData: buffer
      elt.draw()
    queued_draws := 0
