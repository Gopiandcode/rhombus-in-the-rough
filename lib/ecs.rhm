#lang rhombus

import:
   rhombus/meta open
   lib("racket/main.rkt") as racket
   meta:
     lib("racket/syntax.rkt") as syntax
   lib("ffi/unsafe.rkt") as unsafe

export:
  system
  component
  entity
  instance

def max_entities: 10

def mutable systems: []
def mutable components: []

namespace entity:
  export: Entity create available_entities lookup

  def mutable available_entities: racket.#{build-list}(max_entities, fun (id): id)
  def entities: racket.#{build-vector}(max_entities, fun (_): #false)

  class Entity(id::Integral, mutable destroyed :: Boolean):

    method add_component([comp,data]) :: Entity:
      comp.add_component(this, data)
      this
      
    method get_component(fn):
      def comp : fn()
      comp.get_data(this)

    method get_component_opt(fn):
      def comp : fn()
      comp.get_data_opt(this)

    method destroy():
      if destroyed
      | error("Attempt to destroy an invalid entity")
      | for:
          each comp : components
          comp.remove_component(id)
        for:
          each sys : systems
          sys.remove_entity(this)
        entities[id] := #false
        available_entities := List.cons(id, available_entities)
        destroyed := #true

  fun lookup(id::Integral) :: Entity:
    entities[id]

  fun create() :: Entity:
    def List.cons(id, rest) : available_entities
    available_entities := rest
    def entity: Entity(id, #false)
    entities[id] := entity
    unsafe.#{register-finalizer}(
        entity,
        fun (obj :: Entity):
          if obj.destroyed
          | #void
          | obj.destroy())
    entity

class.together:

  class System(
     name :: String,
     mutable _entities :: MutableSet,
     components :: List.of(Component)
   ):

     constructor(name :: String, components :: List.of(Component)):
       def sys: super(name, MutableSet{}, components)
       // add self to components
       for:
          each comp: components
          comp.add_system(sys)
       // add all interested entities
       for:
         each entity: components[0].entities()
         keep_when has_data(entity, components)
         sys._entities[entity] := #true
       sys

     method remove_entity(entity :: entity.Entity):
       _entities[entity] := #false

     method notify_entity(entity :: entity.Entity):
       if has_data(entity, components)
       | _entities[entity] := #true
       | _entities[entity] := #false

     method entities():
       racket.#{in-set}(_entities)

  class Component(
    name :: String,
    entity_to_index_map :: Array,
    index_to_entity_map :: Array,
    data :: Array,
    mutable systems :: List.of(System),
    mutable next_index :: Integral
   ):

    constructor(name):
      def comp:
        super(
          name, 
          Array.make(max_entities, #false),
          Array.make(max_entities, #false),
          Array.make(max_entities, #false),
          [],
          0
        )
      components := List.cons(comp, components)
      comp

    method add_system(sys):
      systems := List.cons(sys, systems)

    method entities():
      def mutable index :: Integral = 0
      fun next():
        if index < next_index
        | def vl: index_to_entity_map[index]
          index := index + 1
          entity.lookup(vl)
        | #false
      racket.#{in-producer}(next, #false)

    method add_component(entity :: entity.Entity, value):
      if entity_to_index_map[entity.id]
      | error("attempt to add duplicate components to entity")
      | def index : next_index

        entity_to_index_map[entity.id] := index
        index_to_entity_map[index] := entity.id
        data[index] := value

        next_index := next_index + 1

        // notify relevant systems
        for:
          each sys: systems
          sys.notify_entity(entity)

    method remove_component(entity :: entity.Entity):
      if (!entity_to_index_map[entity.id])
      | #void
      | def index : entity_to_index_map[entity.id]
        for:
          each other_ind: (index + 1) .. next_index
          def entity: index_to_entity_map[other_ind]

          entity_to_index_map[entity] := other_ind - 1
          index_to_entity_map[other_ind - 1] := entity

          data[other_ind - 1] := data[other_ind]

        block:
          entity_to_index_map[entity.id] := #false
          index_to_entity_map[next_index - 1] := #false
          data[next_index - 1] := #false
        next_index := next_index - 1

        // notify relevant systems
        for:
          each sys: systems
          sys.notify_entity(entity)

    method has_data(entity :: entity.Entity):
      def index: entity_to_index_map[entity.id]
      if index
      | #true
      | #false

    method get_data(entity :: entity.Entity):
      def index: entity_to_index_map[entity.id]
      if (!index)
      | error("entity does not have component")
      | data[index]

    method get_data_opt(entity :: entity.Entity):
      def index: entity_to_index_map[entity.id]
      if (!index)
      | #false
      | data[index]


fun has_data(entity :: entity.Entity, comps :: List.of(Component)):
  def mutable all_has_data: #true
  for:
    each comp: comps
    all_has_data := comp.has_data(entity)
    break_when (!all_has_data)
    #void
  all_has_data


fun test():
  check:
    def Position : Component("Position")
    def [e1,e2,e3]: [entity.Entity(0,#false),entity.Entity(1,#false),entity.Entity(2,#false)]
    Position.add_component(e1, "hello")
    Position.add_component(e2, "world")
    Position.add_component(e3, "!!!")
    Position.get_data(e1) ++ Position.get_data(e2) ++ Position.get_data(e3)
    ~is "helloworld!!!"

  check:
    def Position : Component("Position")
    def [e1,e2,e3]: [entity.Entity(0,#false),entity.Entity(1,#false),entity.Entity(2,#false)]
    Position.add_component(e1, "hello")
    Position.add_component(e2, "world")
    Position.add_component(e3, "!!!")
    Position.remove_component(e2)
    Position.get_data(e1) ++ Position.get_data(e3)
    ~is "hello!!!"

  check:
    def Position : Component("Position")
    def [e1,e2,e3]: [entity.Entity(0,#false),entity.Entity(1,#false),entity.Entity(2,#false)]
    Position.add_component(e1, "hello")
    Position.add_component(e2, "world")
    Position.add_component(e3, "!!!")
    Position.remove_component(e2)
    Position.remove_component(e3)
    Position.get_data(e1)
    ~is "hello"

  check:
    def Position : Component("Position")
    def [e1,e2,e3]: [entity.Entity(0,#false),entity.Entity(1,#false),entity.Entity(2,#false)]
    Position.add_component(e1, "hello")
    Position.add_component(e2, "world")
    Position.add_component(e3, "!!!")
    Position.remove_component(e2)
    Position.remove_component(e3)
    Position.get_data(e1)
    ~is "hello"

  check:
    def _Position : Component("Position")
    fun Position(data): [_Position, data]
    def e1: entity.create()
    def e2: entity.create()
    def e3: entity.create()
    e1.add_component(Position("hello "))
    e2.add_component(Position("world"))
    e3.add_component(Position("!!!"))
    _Position.get_data(e1) ++ _Position.get_data(e2) ++ _Position.get_data(e3)
    ~is "hello world!!!"
  
defn.macro
| 'component $name($field_name :: $ty, ...)':
   def name_stx: Syntax.make('$name')
   def _name_value : match name | '$(x::Identifier)': to_string(x.unwrap())
   def _name : Syntax.make(syntax.#{format-id}(name_stx, "_~a", _name_value)).relocate(name)
   def _name_class : Syntax.make(syntax.#{format-id}(name_stx, "~a_class", _name_value)).relocate(name)
   '«namespace $name:
       export: $_name $_name_class
       def $_name: Component($_name_value)
       class $_name_class(mutable $field_name :: $ty, ...)
     annot.macro '$name': '$name . $_name_class'
     fun
     | $name($field_name :: $ty, ...) : [$name . $_name, $name . $_name_class($field_name, ...)]
     | $name(): $name . $_name»'

expr.macro
| 'name_to_component_value($(name :: Identifier))':
   def name_stx: Syntax.make('$name')
   def _name_value: to_string(name.unwrap())
   def _name : Syntax.make(syntax.#{format-id}(name_stx, "_~a", _name_value)).relocate(name)
   '$name . $_name'

expr.macro
| 'system_defs($name, [[$component_name, $component], ...], [$body, ...])':
    'block:
      def $component_name :: $component = ((name_to_component_value($component)).get_data($name))
      ...
      $body
      ...'

meta:
  fun build_system_body(components, body, this):
    match body
    | 'method $fn($arg, ...):
         $body
         ...
       $rest ...':
       def system_body: build_system_body(components, '$rest ...', this)
       'fun $fn($arg, ...):
         for:
           each $this: _system._entities
           system_defs($this, $components, [$body, ...])
        $system_body'  
    | 'method $fn($arg, ...):
         $body
         ...':
       'fun $fn($arg, ...):
         for:
           each $this: _system._entities
           system_defs($this, $components, [$body,...])'
    | 'fun $fn($arg, ...):
         $body
         ...
       $rest ...':
       def system_body: build_system_body(components, '$rest ...', this)
       'fun $fn($arg, ...):
           $body
           ...
        $system_body'  
    | 'fun $fn($arg, ...):
         $body
         ...':
       'fun $fn($arg, ...):
          $body
          ...'  

    | 'def $fn:
         $body
         ...
       $rest ...':
       def system_body: build_system_body(components, '$rest ...', this)
       'def $fn:
           $body
           ...
        $system_body'  
    | 'def $fn:
         $body
         ...':
       'def $fn:
          $body
          ...'  
  fun
  | extract_this_parameter(''): 'entity'
  | extract_this_parameter('with $name'): '$name'

  fun build_system_exports(body):
    match body
    | 'fun $fn($arg, ...):
         $body
         ...
       $rest ...':
       def exports: build_system_exports('$rest ...')
       '$fn
        $exports'  
    | 'fun $fn($arg, ...):
         $body
         ...':
       '$fn'  
    | 'method $fn($arg, ...):
         $body
         ...
       $rest ...':
       def exports: build_system_exports('$rest ...')
       '$fn
        $exports'  
    | 'method $fn($arg, ...):
         $body
         ...':
       '$fn'  
    | 'def $fn:
         $body
         ...
       $rest ...':
       def exports: build_system_exports('$rest ...')
       '$fn
        $exports'  
    | 'def $fn:
         $body
         ...':
       '$fn'
       


defn.macro
| 'system $name($component_name :: $component, ...) $rest ...:
     $body ...':
    def _name_value : match name | '$(x::Identifier)': to_string(x.unwrap())
    def component_list: 'component_names([$component, ...])'
    def this_value: extract_this_parameter('$rest ...')
    def system_body: build_system_body('[[$component_name, $component], ...]', '$body ...', '$this_value')
    def exports: build_system_exports('$body ...')
    '«namespace $name:
        export:
          _system
          $exports
        def _system: System($_name_value, [name_to_component_value($component), ...])
        $system_body
      »'
     
fun add_component_helper(entity :: entity.Entity, comp):
  entity.add_component(comp)

meta:
  fun
  | extract_entity_arg('[component $name :: $component]'): '$name'
  | extract_entity_arg('[component optional $name :: $component]'): '$name = #false'
  | extract_entity_arg('[component $name :~ $component = $body ...]'): '$name = ($body ...)'

  fun
  | build_entity_args('$fn','[[$comp ...], $rest, ...]', '[$arg, ...]'):
     def comp_arg: extract_entity_arg('[$comp ...]')
     build_entity_args('$fn','[$rest, ...]', '[$comp_arg, $arg, ...]')
  | build_entity_args('$fn','[[$comp ...]]', '[$arg, ...]'):
     def comp_arg: extract_entity_arg('[$comp ...]')
     build_entity_args('$fn','[]', '[$comp_arg, $arg, ...]')

  | build_entity_args('$fn','[]', '[$arg, ...]'):
     '$fn($arg, ...)'

  fun
  | extract_entity_export('[component $name :: $component]'): '$name'
  | extract_entity_export('[component optional $name :: $component]'): '$name'
  | extract_entity_export('[component $name :~ $component = $body ...]'): '$name'

  fun 
  | build_entity_exports('[[$comp ...], $rest, ...]'):
     def name: extract_entity_export('[$comp ...]')
     def exports: build_entity_exports('[$rest, ...]')
     '$name $exports'
  | build_entity_exports('[[$comp ...]]'):
     def name: extract_entity_export('[$comp ...]')
     '$name'
  | build_entity_exports('[]'):
     ''

defn.macro
| 'build_entity_helper([component $name :: $component])':
   'fun $name(entity :: entity.Entity) :: $component: entity.get_component($component)'
| 'build_entity_helper([component optional $name :: $component])':
   'fun $name(entity :: entity.Entity) :: $component: entity.get_component_opt($component)'
| 'build_entity_helper([component $name :~ $component = $body ...])':
   'fun $name(entity :: entity.Entity) :: $component: entity.get_component($component)'

defn.macro
| 'build_entity_helpers([$comp, ...])':
   'build_entity_helper($comp)
    ...'
| 'build_entity_helpers([])': ''


expr.macro
| 'build_entity_create_body_def($entity, [component $name :: $component])':
   'add_component_helper($entity, $component($name))'
| 'build_entity_create_body_def($entity, [component optional $name :: $component])':
   'if $name
      | add_component_helper($entity, $component($name))
      | #void'
| 'build_entity_create_body_def($entity, [component $name :~ $(component :: Identifier) = $(fn :: Identifier)($body, ...)])':
    if to_string(fn.unwrap()) == to_string(component.unwrap())
    | 'add_component_helper($entity, $name)'
    | 'add_component_helper($entity, $component($name))'   
| 'build_entity_create_body_def($entity, [component $name :~ $(component :: Identifier) = $body ...])':
    'add_component_helper($entity, $component($name))'   

expr.macro
| 'build_entity_create_body($entity, [$comp, ...])':
   'block:
      build_entity_create_body_def($entity, $comp)
      ...
      $entity'

defn.macro
| 'instance $name:
     $body ...
     ...':
   def fn: build_entity_args('create','[[$body ...], ...]', '[]')
   def helpers: 'build_entity_helpers([[$body ...], ...])'
   def exports: build_entity_exports('[[$body ...], ...]')

   'namespace $name:
     export:
       create
       $exports

     $helpers

     fun $fn :: entity.Entity:
       def ent :~ entity.Entity = entity.create()
       build_entity_create_body(ent, [[$body ...], ...])'

