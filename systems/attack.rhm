#lang rhombus

import:
  lib("raylib/2d/unsafe.rkt") as raylib

  "../lib/datatypes.rhm" open
  "../lib/ecs.rhm" open
  "../lib/lang.rhm" open
  "../lib/adt.rhm"
  "../lib/ordered_drawing.rhm"

  "../components/graphics.rhm" open
  "../components/character_state.rhm" open
  "../components/weapon.rhm" open
  "../components/movement.rhm" open
  "../components/damage.rhm" open
  "../components/attack.rhm" open


export:
  WeaponAttackSystem
  WeaponAnimationSystem
  MonsterAttackSystem

use_static

system WeaponAnimationSystem(
    entity_state :: HasState,
    position :: Position,
    weapon_animation :: WeaponAnimation,
    anim :: AnimatedSprite,
    orientation :: Orientation
  ):

   method draw():
     match entity_state.state
     | State.Idle: #void
     | State.Attacking:
         ordered_drawing.queue_draw(
           weapon_animation.texture,
           math.inexact(position.value.x - 32.),
           math.inexact(position.value.y - 32.),
           64.,
           64.,
           math.inexact(64. * anim.frame_counter),
           math.inexact(64. * orientation.facing_direction.ind),
           64.,
           64.,
           0.,
           0.
         )

system MonsterAttackSystem(
     entity_state :: HasState,
     animation :: AnimatedSprite,
     orientation :: Orientation,
     attack :: MonsterPhysicalAttack
  ) with this:

    method update():
      def current_time : raylib.GetTime()
      cond
      | entity_state.state == State.Attacking && animation.frames != attack.end:
          animation.frames := attack.end
          animation.frame_counter := attack.start
          def damage_box :: Rectangle : 
            match orientation.facing_direction
            | Direction.UP: Rectangle(-16.,0.,32.,32.)
            | Direction.DOWN: Rectangle(-16.,16.,32.,32.)
            | Direction.LEFT: Rectangle(-32.,0.,32.,32.)
            | Direction.RIGHT: Rectangle(0.,0.,32.,32.)
          attack.attack_start := current_time
          this.add_component(DamageBox(damage_box))
      | entity_state.state == State.Attacking && (current_time - attack.attack_start) >= attack.attack_duration:
          animation.frames := attack.start
          entity_state.state := State.Idle
          this.remove_component(DamageBox)
      | ~else: #void

system WeaponAttackSystem(
     entity_state :: HasState,
     weapon_action :: WeaponActionAnimation,
     animation :: AnimatedSprite,
     weapon :: WeaponInfo,
     orientation :: Orientation
  ) with this:

  method update():
    cond
    | entity_state.state == State.Attacking && !weapon_action.animation_started:
        weapon_action.animation_started := #true
        weapon_action.animation_start_time := raylib.GetTime()

        weapon_action.old_texture := animation.texture
        weapon_action.old_frame_update_speed := animation.frame_update_speed
        weapon_action.old_frames := animation.frames
        animation.moving := #true
        animation.frame_counter := 0.
        animation.texture := weapon_action.texture
        animation.frame_update_speed := weapon_action.frame_update_speed
        animation.frames := weapon_action.frames
        def damage_box :: Rectangle : 
          match orientation.facing_direction
          | Direction.UP: weapon.damage_box_up
          | Direction.DOWN: weapon.damage_box_down
          | Direction.LEFT: weapon.damage_box_left
          | Direction.RIGHT: weapon.damage_box_right
        this.add_component(DamageBox(damage_box))

    | entity_state.state == State.Attacking && weapon_action.animation_started && (
         (raylib.GetTime() - weapon_action.animation_start_time) >= (
          weapon_action.frame_update_speed * weapon_action.frames
         )):
         entity_state.state := State.Idle
         weapon_action.animation_started := #false
         animation.texture := weapon_action.old_texture
         animation.frame_counter := 0.
         animation.frame_update_speed := weapon_action.old_frame_update_speed
         animation.frames := weapon_action.old_frames
         animation.moving := #false

         this.remove_component(DamageBox)
    | ~else: #void
