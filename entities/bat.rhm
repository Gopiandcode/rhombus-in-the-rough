#lang rhombus

import:
  lib("raylib/2d/unsafe.rkt") as raylib

  "../lib/lang.rhm" open
  "../lib/ecs.rhm" open
  "../lib/datatypes.rhm" open
  "../lib/resources.rhm" expose: def_texture
  "../lib/adt.rhm"

  "../game/behaviour_tree.rhm" open

  "../components/movement.rhm" open
  "../components/graphics.rhm" open
  "../components/damage.rhm" open
  "../components/health.rhm" open
  "../components/behaviour.rhm" open
  "../components/aggro.rhm" open
  "../components/attack.rhm" open
  "../components/character_state.rhm" open

export: Bat


def_texture bat_image : "./resources/images/enemies/bat.png"

adt.datatype PatrolState
| Waiting(start_time :: Real, next_index :: Integral)
| MovingTowards(index :: Integral)
def wait_time: 5.0
def move_speed: 50.0

declare_behaviour_state(patrol_state, patrol)

behaviour_tree PatrolBehaviour(monster :: entity.Entity) with state(patrol_state, patrol):
  perform Bat.follow_patrol(monster, patrol_state, patrol) using state(patrol_state)

behaviour_tree AggroBehaviour(monster :: entity.Entity):
  all_of:
    check Bat.is_aggroed(monster)
    perform Bat.follow_aggro_target(monster)

behaviour_tree AttackPlayer(monster :: entity.Entity):
  all_of:
    check Bat.is_aggroed(monster)
    check Bat.near_aggro_target(monster)
    perform Bat.perform_attack(monster)


behaviour_tree PatrolOrFollowBehaviour(monster :: entity.Entity) with state(patrol_state, patrol):
  first_of:
    AttackPlayer(monster)
    AggroBehaviour(monster)
    PatrolBehaviour(monster)

instance Bat with this:
  component position :~ Position = Vector2(280.,350.)
  component velocity :~ Velocity = Vector2(0.,0.)
  component orientation :~ Orientation = Direction.DOWN
  component move_speed :~ MoveSpeed = 50.0
  component state :~ HasState = State.Idle
  component sprite :~ AnimatedSprite = AnimatedSprite(
      bat_image,
      #true,
      0,
      0.1,
      0.,
      4
    )
  component attack_info :~ MonsterPhysicalAttack = MonsterPhysicalAttack(4, 7, 1.0, 30.0, 0.)
  component hurt :~ HurtBox = Rectangle(
    -16., 0.,
    32., 32.
  )
  component basic_damage :~ ApplyBasicPhysicalDamage = 5.0
  component health :~ Health = Health(10.,10.)
  component aggro_range :~ AggroRange = 100.
  component aggro_timeout :~ AggroTimeout = 10.

  method is_aggroed():
    this.has_component(IsAggroedTo)

  method near_aggro_target():
    def aggro :: IsAggroedTo: this.get_component(IsAggroedTo)
    def target : aggro.target
    def target_position :: Position : target.get_component(Position)
    def distance: target_position.value.subtract(position.value).distance()
    distance <= attack_info.attack_range

  method perform_attack():
    state.state := State.Attacking

  method follow_aggro_target():
    when (state.state == State.Idle):
      def aggro :: IsAggroedTo: this.get_component(IsAggroedTo)
      def target : aggro.target
      def target_position :: Position : target.get_component(Position)
      def line_to_target: target_position.value.subtract(position.value)
      def distance: line_to_target.distance()
      def direction: line_to_target.normalize()
      def move_dir: direction.scale(move_speed.value)
      velocity.value := move_dir

  method follow_patrol(pat_state :: PatrolState, patrol :: List.of(Vector2)):
    if (state.state == State.Idle)
    | adt.match pat_state
      | Waiting(start_time, next_index):
          def current_time: raylib.GetTime()
          if (current_time - start_time) >= wait_time
          | MovingTowards(next_index)
          | Waiting(start_time, next_index)
      | MovingTowards(index):
          def target: patrol[index]
          def line_to_target: target.subtract(position.value)
          def distance: line_to_target.distance()
          if distance <= 10.0
          | velocity.value := Vector2(0.,0.)
            Waiting(raylib.GetTime(), (index + 1) mod patrol.length())
          | def direction: line_to_target.normalize()
            def move_dir: direction.scale(move_speed.value)
            velocity.value := move_dir
            MovingTowards(index)
    | pat_state

  method set_patrol(path):
    def behaviour: PatrolOrFollowBehaviour(this)
    behaviour.set_patrol_state(MovingTowards(0))
    behaviour.set_patrol(path)
    this.add_component(WithBehaviour(behaviour))



