#lang rhombus

import:
   rhombus/meta open
   lib("racket/main.rkt") as racket
   lib("raylib/2d/unsafe.rkt") as raylib
   lib("raylib/raymath/unsafe.rkt") as raymath

   "lib/lang.rhm" open
   "lib/resources.rhm" expose: def_texture
   "lib/event.rhm"
   "lib/message.rhm" open

   "game/raylib_lang.rhm" open
   "game/view.rhm" open
   "game/game_state.rhm"
   "game/map_manager.rhm"

   "screens/world.rhm"
   "entities/player.rhm" open

   "maps/map1.rhm"
   "maps/map2.rhm"

use_static

// constants
def screen_width: 800
def screen_height: 450

def player: Player.create()
def maps: map_manager.MapManager(player, "map1", map1.Map1)
maps.load_map("map2", map2.Map2)
// def tmap: tiled.load_map("./maps/map1.tmx")
def world_screen: world.WorldScreen(
    View(),
    maps
  )

message PickupItem(ent :: entity.Entity)
message ChangeMap(target :: String)

event.handle
| PickupItem(ent): world_screen.player_inventory.add_item(ent)
| ChangeMap(target): world_screen.map_manager.change_map(target)

game_state.init(
  world_screen
)

// raylib.SetConfigFlags(raylib.FLAG_FULLSCREEN_MODE)
raylib.InitWindow(screen_width,screen_height, "Game")
resources.init()
raylib.SetTargetFPS(60);

while (!raylib.WindowShouldClose()):

  game_state.update()
  event.update()

  draw_block:
    raylib.ClearBackground(raylib.BLACK)
    game_state.draw()
    raylib.DrawFPS(0,0)

raylib.CloseWindow()
