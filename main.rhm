#lang rhombus

import:
   rhombus/meta open
   "lib/datatypes.rhm" open
   "lib/lang.rhm" open
   "game/raylib_lang.rhm" open
   "game/view.rhm" open
   "game/game_map.rhm"
   "lib/resources.rhm" expose: def_texture
   "game/terrain.rhm"
   "entities/humanoid.rhm"
   "lib/ecs.rhm" open
   "lib/ordered_drawing.rhm"
   meta:
     lib("racket/syntax.rkt") as syntax
   lib("racket/main.rkt") as racket
   lib("raylib/2d/unsafe.rkt") as raylib
   lib("raylib/raymath/unsafe.rkt") as raymath

component Position(value :: Vector2)
component Velocity(value :: Vector2)
component AnimatedSprite(
   texture :: resources.Texture,
   moving :: Boolean,
   facing_direction :: direction.Direction,
   frame_counter :: Integral,
   frame_update_speed :: Real,
   last_frame_update_time :: Real,
   frames :: Integral
)
component ControlledByUser(speed :: Real)

system Movement(
    position :: Position,
    velocity :: Velocity
  ):

 method update():
   def delta : raylib.GetFrameTime()
   position.value := position.value.add(velocity.value.scale(delta))

system UserControlled(
    anim :: AnimatedSprite,
    velocity :: Velocity,
    control :: ControlledByUser 
  ):

  method update():
    def mutable new_direction : anim.facing_direction
    def mutable any_input : #false
    velocity.value.x := 0.; velocity.value.y := 0.
    
    handle_inputs (raylib.IsKeyDown)
    | raylib.KEY_D
      new_direction := direction.RIGHT
      velocity.value.x += 1.
    | raylib.KEY_A
      new_direction := direction.LEFT
      velocity.value.x -= 1.
    | raylib.KEY_W
      new_direction := direction.UP
      velocity.value.y -= 1.
    | raylib.KEY_S
      new_direction := direction.DOWN
      velocity.value.y += 1.
    | ~any
      any_input := #true

    if any_input
    | velocity.value := velocity.value.normalize()
      velocity.value := velocity.value.scale(control.speed)
      when (anim.facing_direction != new_direction || ! anim.moving):
        anim.facing_direction := new_direction
        anim.last_frame_update_time := raylib.GetTime()
        anim.frame_counter := 0
      anim.moving := #true
    | anim.frame_counter := 0
      anim.moving := #false

system SpriteAnimation(anim :: AnimatedSprite):
  method update():
    when (anim.moving):
      def current_time : raylib.GetTime()
      def delta : (current_time - anim.last_frame_update_time)
      when (delta > anim.frame_update_speed):
        def increment: math.floor(delta / anim.frame_update_speed)
        anim.frame_counter := (anim.frame_counter + increment) mod anim.frames
        anim.last_frame_update_time := current_time

def HUMANOID_FRAMES : 9
system HumanDrawable(
    position :: Position,
    anim :: AnimatedSprite
  ) with this:

    method draw():
      ordered_drawing.queue_draw(
        anim.texture,
        math.inexact(position.value.x - 32.),
        math.inexact(position.value.y - 32.),
        64.,
        64.,
        math.inexact(64. * anim.frame_counter),
        math.inexact(64. * anim.facing_direction.ind),
        64.,
        64.,
        0.,
        0.
      )

def_texture main_character_image : "./resources/images/male_walkcycle.png"
def_texture blacksmith_image : "./resources/images/soldier.png"
  
instance Player:
  component position :~ Position = Vector2(320.,320.)
  component velocity :~ Velocity = Vector2(0.,0.)
  component sprite :~ AnimatedSprite = AnimatedSprite(
      main_character_image,
      #false,
      direction.DOWN,
      0,
      0.05,
      0.,
      HUMANOID_FRAMES
    )
  component control :~ ControlledByUser = 100.0

instance NPC:
  component position :~ Position = Vector2(320.,320.)
  component velocity :~ Velocity = Vector2(0.,0.)
  component sprite :~ AnimatedSprite = AnimatedSprite(
      blacksmith_image,
      #false,
      direction.DOWN,
      0,
      0.05,
      0.,
      HUMANOID_FRAMES
    )


  
def character: Player.create()
def blacksmith: NPC.create()
    
// constants
def screen_width: 800
def screen_height: 450

def view : View()
def map : game_map.Map(100,100, terrain.rock)

raylib.InitWindow(screen_width,screen_height, "Game")
resources.init()
raylib.SetTargetFPS(60);


while (!raylib.WindowShouldClose()):

  view.update()
  UserControlled.update()
  SpriteAnimation.update()
  Movement.update()

  draw_block:
    raylib.ClearBackground(raylib.RAYWHITE)

    draw_2d view:

      map.draw_base(view)
      HumanDrawable.draw()

      ordered_drawing.draw()

    def msg:
      racket.format("Nothing to show....")
    raylib.DrawText(msg, 10, 10, 20, raylib.DARKGRAY)
    raylib.DrawFPS(0,0)

raylib.CloseWindow()
