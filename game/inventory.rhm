#lang rhombus

import:
  lib("raylib/2d/unsafe.rkt") as raylib

  "../lib/lang.rhm" open
  "../lib/ecs.rhm" open
  "../lib/spritesheet.rhm" expose: Sprite

  "../components/movement.rhm" open
  "../components/item.rhm" open

  "../lib/event.rhm"
  "../lib/message.rhm" open
  "../messages.rhm" open

export:
  Inventory
  InventorySlot

use_static

def capacity: 40

class InventorySlot(sprite :: Sprite, mutable entities :: List.of(entity.Entity))

class Inventory(items :: MutableMap, mutable unnamed_entities :: List.of(InventorySlot)):
  implements Sequenceable

  override method to_sequence():
    def MapView{k : v, ...}: items
    def [item, ...]: unnamed_entities
    [Pair(k,v), ...] ++ [Pair(#false, item), ...]

  constructor():
    super(MutableMap{},[])

  method size() :: Int:
    items.length() + unnamed_entities.length()

  method try_add_item(item :: entity.Entity):: Boolean:
    def item_sprite :~ ItemSprite : item.get_component(ItemSprite)
    cond
    | item.has_component(ItemMetaInformation):
        def meta_information :: ItemMetaInformation : item.get_component(ItemMetaInformation)
        cond
        | items.has_key(meta_information.name):
            def slot :: InventorySlot : items[meta_information]
            slot.entities := List.cons(item, slot.entities)
            #true
        | size() < capacity:
            def slot : InventorySlot(item_sprite.sprite, [item])
            items[meta_information.name] := slot
            #true
        | ~else: #false
    | size() < capacity:
        unnamed_entities := List.cons(InventorySlot(item_sprite.sprite,[item]), unnamed_entities)
        #true
    | ~else: #false

  method add_item(item :: entity.Entity):
    when (try_add_item(item)):
      item.remove_component(Position)

