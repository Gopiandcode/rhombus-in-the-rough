#lang rhombus
import:
  "../lib/lang.rhm" open

export:
  Screen
  push
  draw
  update
  init

interface Screen:

  abstract method draw()

  abstract method update()

  method should_pop() :: Boolean: #false

def mutable state_stack :: List.of(Screen): []
def mutable current_state :~ Screen : #false

fun push(s :: Screen):
  state_stack := List.cons(current_state, state_stack)
  current_state := s

fun pop():
  def List.cons(hd, tl) : state_stack
  current_state := hd
  state_stack := tl
  
fun draw():
  for:
    each state : state_stack.reverse()
    state.draw()
  current_state.draw()

fun update():
  when (current_state.should_pop()):
    pop()
  current_state.update()


fun init(s :: Screen):
  current_state := s
