#lang rhombus

import:
   rhombus/meta open
   "../lib/datatypes.rhm" open
   "../lib/lang.rhm" open
   "raylib_lang.rhm" open
   "view.rhm" open
   "terrain.rhm"
   lib("racket/main.rkt") as racket
   lib("raylib/2d/unsafe.rkt") as raylib

export:
  Map

def tile_size: Vector2(32.,32.)
def draw_sprite_pos : Vector2(0.,0.)

fun set_tile_display_rect(x :: Real, y :: Real, dest_rect::Rectangle):
  def rect_x :~ Real = x * tile_size.x
  def rect_y :~ Real = y * tile_size.y

  dest_rect.x := math.inexact(rect_x)
  dest_rect.y := math.inexact(rect_y)
  
fun draw_sprite(id :: terrain.Terrain, x :: Real, y :: Real):
  draw_sprite_pos.x := math.inexact(x)
  draw_sprite_pos.y := math.inexact(y)
  id.draw_tile(terrain.tiles.BASE0, draw_sprite_pos)


class Map(width :: Integral, height :: Integral, base, elements, dest_rect :: Rectangle):


  constructor
  | (width, height, base):
      super(width, height, base, [], Rectangle(0., 0., tile_size.x, tile_size.y))
  | ():
      Map(100,100, terrain.rock)

  method calculate_iteration_bounds(view :: View):
    def view_rect :~ Rectangle = view.view_rect
    def start_x: math.max(math.floor(view_rect.x / tile_size.x),0)
    def stop_x: math.min(math.ceiling((view_rect.x + view_rect.width) / tile_size.x), width)
    def start_y: math.max(math.floor(view_rect.y / tile_size.y), 0)
    def stop_y: math.min(math.ceiling((view_rect.y + view_rect.height) / tile_size.y), height)
    values(start_x, stop_x, start_y, stop_y)

  method draw_base(view :: View):
    def values(start_x, stop_x, start_y, stop_y): calculate_iteration_bounds(view)
    for:
      each x : start_x .. stop_x
      each y : start_y .. stop_y
      set_tile_display_rect(x,y,dest_rect)
      draw_sprite(base, dest_rect.x, dest_rect.y)
      
