#lang rhombus

import:
   rhombus/meta open
   "../lib/datatypes.rhm" open
   "../lib/lang.rhm" open
   "../lib/resources.rhm" expose: Texture
   "../lib/tiled.rhm"
   "../lib/ordered_drawing.rhm"
   "raylib_lang.rhm" open
   "view.rhm" open
   "terrain.rhm"
   lib("racket/main.rkt") as racket
   lib("raylib/2d/unsafe.rkt") as raylib

export:
  TileMap
  Tile
  TileLayer
  GameMap

def tile_size: Vector2(32.,32.)
def draw_sprite_pos : Vector2(0.,0.)
def origin: Vector2(0.,0.)

use_static

class Tile(texture :: Texture, offset_x:: Integral, offset_y :: Integral)

class TileLayer(width :: Integral, height :: Integral, elements :: Array.of(Integral), base_y):
  implements Callable

  override method call(x :: Integral,y :: Integral) :: Integral:
    elements[math.exact(width * y + x)]

class TileMap(
    width :: Integral, height :: Integral,
    tile_rect :: Rectangle, dest_rect :: Rectangle,
    collision_boxes :: List.of(Rectangle),
    tile_map :: Map.of(Integral, Tile),
    layers :: List.of(TileLayer),
    points :: Map.of(String, Pair.of(Real,Real)),
    paths :: Map.of(String, List.of(Pair.of(Real, Real)))
  ):

  method update_dest_rect(x :: Real, y :: Real):
    def rect_x :~ Real = x * tile_rect.width
    def rect_y :~ Real = y * tile_rect.height

    dest_rect.x := math.inexact(rect_x)
    dest_rect.y := math.inexact(rect_y)


  method calculate_iteration_bounds(view :: View):
    def view_rect :~ Rectangle = view.view_rect
    def start_x: math.max(math.floor(view_rect.x / tile_rect.width),0)
    def stop_x: math.min(math.ceiling((view_rect.x + view_rect.width) / tile_rect.width), width)
    def start_y: math.max(math.floor(view_rect.y / tile_rect.height), 0)
    def stop_y: math.min(math.ceiling((view_rect.y + view_rect.height) / tile_rect.height), height)
    values(start_x, stop_x, start_y, stop_y)

  method draw_layer(layer :: TileLayer, x, y, base_y = #false):
    def maybe_tile: Map.ref(tile_map, layer(x,y), #false)
    when maybe_tile:
      def tile :: Tile = maybe_tile
      tile_rect.x := math.inexact(tile.offset_x)
      tile_rect.y := math.inexact(tile.offset_y)
      update_dest_rect(x,y)
      if base_y
      | ordered_drawing.queue_draw(
          tile.texture,
          dest_rect.x,dest_rect.y, dest_rect.width, dest_rect.height,
          tile_rect.x, tile_rect.y, tile_rect.width, tile_rect.height,
          0.,0.,
          #false,
          math.inexact(base_y * tile_rect.height)
        )
      | raylib.DrawTexturePro(
          tile.texture.inner(),
          tile_rect.inner(),
          dest_rect.inner(),
          origin.inner(),
          0.,
          raylib.WHITE
        )

  method draw(view :: View):
    def values(start_x, stop_x, start_y, stop_y): calculate_iteration_bounds(view)
    match layers
    | []: #void
    | List.cons(base_layer, layers):
       for:
         each x : start_x .. stop_x
         each y : start_y .. stop_y
         draw_layer(base_layer, x, y)

       for:
         each layer :: TileLayer : layers
         each x : start_x .. stop_x
         each y : start_y .. stop_y
         draw_layer(layer, x, y, layer.base_y)

  constructor
  | (width :: Integral, height :: Integral,
     tile_rect :: Rectangle, dest_rect :: Rectangle,
     collision_boxes :: List.of(Rectangle),
     tile_map :: Map.of(Integral, Tile),
     layers :: List.of(TileLayer),
     points :: Map.of(String, Pair.of(Real,Real)),
     paths :: Map.of(String, List.of(Pair.of(Real,Real)))):
       super(width, height, tile_rect, dest_rect, collision_boxes, tile_map, layers, points, paths)
  | (map :: tiled.Map):
      def width: map.width
      def height: map.height
      def tile_rect: Rectangle(0.,0., map.tile_width, map.tile_height)
      def dest_rect: Rectangle(0.,0., map.tile_width, map.tile_height)
      def collision_boxes:
        for List:
          each object: map.objects
          each element: object.elements
          keep_when element is_a tiled.CollisionBox
          def elt :~ tiled.CollisionBox = element
          Rectangle(elt.x, elt.y, elt.width, elt.height)
      def points:
        for Map:
          each object: map.objects
          each element: object.elements
          keep_when element is_a tiled.Point
          def elt :~ tiled.Point = element
          values(elt.name, Pair(elt.x, elt.y))
      def paths:
        for Map:
          each object: map.objects
          each element: object.elements
          keep_when element is_a tiled.Polygon
          def elt :~ tiled.Polygon = element
          def [Pair(px, py), ...]: elt.points
          values(elt.name, [Pair(elt.x + px, elt.y + py), ...])

      def tile_list:
        for Set:
          each layer : map.layers
          each row: layer.data
          each id: row
          id
      fun resolve_id(id) :: Pair.of(tiled.Tileset, Integral):
        for values(result=#false):
          each Pair(first_gid, tset :~ tiled.Tileset): map.tilesets
          skip_when (!(first_gid <= id && id <= first_gid + tset.tile_count))
          Pair(tset, id - first_gid)

      def tile_map:
        def texture_map: MutableMap{}
        for Map:
          each tile: tile_list
          skip_when (tile <= 0)
          def Pair((tileset :~ tiled.Tileset), id): resolve_id(tile)
          def x : id mod tileset.columns
          def y : math.floor((id - x) / tileset.columns)
          def texture:
            if texture_map.has_key(tileset.image)
            | texture_map[tileset.image]
            | def texture: resources.load_texture(tileset.image)
              texture_map[tileset.image] := texture
              texture
          values(tile, Tile(texture, x * tileset.tile_width, y * tileset.tile_height))
      def layers:
        for List:
          each layer: map.layers
          def elements:
            for Array:
              each row: layer.data
              each ind: row
              ind
          def base_y: Map.ref(layer.properties, "base-y", #false)
          TileLayer(width, height, elements, base_y)
      super(
        width, height,
        tile_rect, dest_rect,
        collision_boxes,
        tile_map,
        layers,
        points,
        paths
      )


class GameMap(map :: TileMap):
  nonfinal
  method get_map()::TileMap: map

  method draw(view :: View):
    map.draw(view)

  abstract method init()
  abstract method update()
  abstract method destroy()

// def map: tiled.load_map("../maps/map1.tmx")
// TileMap(map)
// def values(tmap, tdefs): .to_syntax()
// println(tmap)
